<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[use-of-git]]></title>
      <url>https://Lneayce.github.io/2016/10/26/use-of-git/</url>
      <content type="html"><![CDATA[<h1 id="Git-和-SVN"><a href="#Git-和-SVN" class="headerlink" title="Git 和 SVN"></a>Git 和 SVN</h1><p>SVN 是 Git 之前比较常用的版本管理系统, 但是集中式版本的弊端逐渐显露, 在很多情况下受制比较多, 具体的对比的区别自行 Google 或 Wiki. </p>
<p>这里对尝试学习使用的总结和学习</p>
<a id="more"></a>
<h1 id="补充学习-对之前学习的巩固和提升认识"><a href="#补充学习-对之前学习的巩固和提升认识" class="headerlink" title="补充学习, 对之前学习的巩固和提升认识"></a>补充学习, 对之前学习的巩固和提升认识</h1><h2 id="待填入…"><a href="#待填入…" class="headerlink" title="待填入…."></a>待填入….</h2><h1 id="以下是之前零散的学习到的-但是后来觉得学习的还不够-所以有了以上的继续学习"><a href="#以下是之前零散的学习到的-但是后来觉得学习的还不够-所以有了以上的继续学习" class="headerlink" title="以下是之前零散的学习到的, 但是后来觉得学习的还不够, 所以有了以上的继续学习"></a>以下是之前零散的学习到的, 但是后来觉得学习的还不够, 所以有了以上的继续学习</h1><h2 id="SVN-的目录规范"><a href="#SVN-的目录规范" class="headerlink" title="SVN 的目录规范:"></a>SVN 的目录规范:</h2><pre><code>* trunk: 主干目录, 将主要的主线功能放这里
* branch: 分支, 主线之外另外的功能使用, 开发完成后, 测试稳定之后, 可以合并到主干项目中
* tags: 重大版本的备份,要开发另一个重大版本时, 要对之前一个稳定的版本备份, 当发现新版本不行, 要重头开始做的时候, 再把上次备份拿回 trunk 中
* *
* 按照项目组的不同, 在 trunk 目录下面在分几级文件, 平台划分下, 再细分, 如可以分移动组-&gt;iOS 组
* 当 trunk 完成了这个版本的制作发布后, 经理需要将这个版本备份下: 在经历连接的仓库那里点击 tags-&gt;起名-&gt;保存位置(经理需要连接的是整个微博项目的仓库, 这样才能看到 trunk 和 tags 的目录)
* 当发布稳定版本后根据市场反馈发现重大 bug, 同时2.0版本在着手进行开发, 需要开一个分支来修复 bug: 从 tags 中的稳定版本开一个分支到 branch, 然后给予指定人员权限, 那个人连接到这个分支的仓库地址.
* 当 bug 在分支修复后, 提交到仓库, 经理需要将这个修复 bug 版本的 merge 到主线中的2.0来: 先将修复好的分支 checkout 下来, 查看效果, 再从 work_copy 从 trunk 处 merge 分支修改好的项目, 再 commit
* 这时候别人在从 trunk上仓库 up 的东西就是合并了修复 bug 的版本, 这时连接分支的其他的可以断连了 
* 之后经理还要做将修复好的版本 tags 备份, 生成一个新的版本, 之后将分支删除
* 分支还可以在增加一个新功能而不影响主线开发的时候用, 开发完成后合并到主线, 发布后备份到 tags
</code></pre><h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><pre><code>* 分布式版本控制工具, 和 SVN 不是一个量级的.比 SVN 快很多, 优点很多
* 每个终端都是一个服务器, 都有自己的一个版本仓库, 平时的 commit 操作都是 Commit 到自己的本地仓库, 等需要时再 push 到公共仓库上, 或者说是其他的终端去, 刚开始可以从其他仓库 clone 下来一个仓库, 平时可以向其他仓库 pull 一些东西下来 
* 使用工具: SourceTree, Github(针对自家 Github 平台), Xcode,
</code></pre><h2 id="Git-的配置"><a href="#Git-的配置" class="headerlink" title="Git 的配置"></a>Git 的配置</h2><pre><code>* git init: 首先要在建立版本管理的地方初始化一个仓库, 然后就有了.git 文件夹, 里面装有这个仓库版本管理相关的所有东西
* git config &quot;user.name&quot; 用户名  配置仓库用户, 以后追踪是谁改的, 谁的操作. 或者 cat config 这个文件来修改里面的内容来配置 
* 建议配置邮箱, git 可以 办到在 Commit / push 之前发一个邮件(好像需要设置 git 的 hook)
* --globle 参数是配置全局的意思, 会让这条配置配置在整个系统, 到时整个系统中 git 的 user.name 都是这条配置的
* 要查看某个文件里的内容用 cat 文件
* add-&gt;Commit 在 git 的版本控制下不能直接扔一个文件进去就行, 要添加的还需要 add, 再 Commit 才能在版本控制中看到这个文件(add 是添加到缓冲区, commit 才是添加到版本库)
* commit: git 里必须要写注释才能提交, 而且不能为空, 后面跟提交的文件, 不写代表所有的都提交, 而且不用像 add 那样写&apos;.&apos;
* add: 添加文件到当前仓库, 如果添加多个文件到仓库, 直接写&quot;.&quot;, &quot;add . &quot;代表将当前目录的所有文件添加一遍到仓库, 单个也写.更方便, 而且.是表示所有文件这个只有 add 有, 其他操作对应这个特性是什么都不写
* *
* git config 常用配置指令:
* &quot;user.name&quot;   /   &quot;user.email&quot;
* -l : 查看配置信息
* -e : 编辑配置信息
* alias : 设置指令的别名 : 
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config alias.别名 原指令名/<span class="string">"原指令语句"</span></div></pre></td></tr></table></figure>

给 config 定义别名: git config alias.cfg config
* 对于改动的文件, 直接提交也不行, 在 git 中, 所有修改和添加操作都要 add, add 可以可以看成是添加一个改动操作的意思, 它会把所有的改动操作添加到一个 state 暂缓区中, 在 commit 的时候一次提交到版本库里, 这样更快速, 像计算机缓存一样
* log: 可以查看文件的修改日志,日志中 commit 后跟的是版本号, 是那次提交的 sha1值, 因为是分布式, 这样可以保证版本号唯一
* log --pretty=oneline 可以打印漂亮点, 一次 commit 一行, 
        21d58107677a609451d960e49d2af2d733e29b43  给 car.m 添加了 car 类
        403ec06a81000aa69da57495904eb24eb4625309  添加了 car.m文件
        ba14c4953e895b6f6bca85d02196e7ed16cf9162  添加了多个文件
        60f8f8f21f450390ce10b739bf284c8589714348  添加一个 person.m 文件
* 也可以起别名, 将一些配置设置指令配成一个指令, 来打印更好的日志格式:
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git cfg --global alias.lg <span class="string">"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt; %Creset' --abbrev-commit"</span></div></pre></td></tr></table></figure>

 这样全局的 git 的 log 都是这样的, 不用去重复配置
</code></pre><h2 id="git-的版本回退"><a href="#git-的版本回退" class="headerlink" title="git 的版本回退"></a>git 的版本回退</h2><pre><code>* git 支持无限次后悔: RESET
* reset --hard HEAD^  : 回到上一个版本, ^^:上上个版本, 还可以~1, 上一个, ~3, 上上上个版本, hard  指示强转回退, 可以起别名
* 可以在不同的版本号间跳转: reset --hard 版本号
* 如果不知道版本号, 可以用git reflog 查看之前的所有操作, 找到最后一次提交的操作回退
* 写了一堆东西不想要了, 可以回退到当前最新版本号就可以了 HEAD
</code></pre><h2 id="移除文件"><a href="#移除文件" class="headerlink" title="移除文件:"></a>移除文件:</h2><pre><code>* remove: rm 文件名, 这个 rm 操作一样是放操作进缓存区, 可以回退到 HEAD 来撤销 rm 操作, 如果 Commit 了, 就回退到上一版本, 再要回来就回退到最新版本号
</code></pre><h2 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h2><pre><code>* 在对文件做了改变时, 要在 Commit 前将这些改点放到缓冲区, 提交时会把缓冲区的提交到版本库, 没有在缓冲区的提交不上去, 版本库对这些改变就没有记录了
* state : 查看某个文件(或全部 )的状态, 没有进缓冲区的 change 会提示出来, 进缓冲区待提交的也会标出来, 颜色不一样

* diff: 查看某个文件的修改状态, git diff, 放进缓存区后就看不到修改的状态了
* config -e: 进入 vim 编辑配置文件
</code></pre><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理:"></a>工作原理:</h2><pre><code>* 工作原理:
    * 工作区(Working Directory): 即平时我们开发所要动到的文件, 操作到的目录, 即非.git 的里那些而是我们自己建的东西
    * 版本仓库(Repository): 即 git 给我们做版本控制的地方, 即.git 目录下的东西
        &gt; 暂缓区(stage): 当文件做了修改时 add 到的缓冲区, 
        &gt; 分支(master): git 自动创建的第一个分支, 默认一开始就在这个分支下进行版本控制
        &gt; HEAD 指针: 用于指向当前分支, git branch. 查看当前分支

当有改变时, 暂缓区是空的, 工作区的状态改变了, 要先 add. add 到版本库的stage 里, stage 里就有了当前工作区新做的改变, 在 commit 提交到HEAD 所指的分支版本库, commit 后暂缓区会清空. 而且工作区和分支东西一致后会显示 clean, 干净的.
比如有新添加文件时, status 指令会提示Untracked files:, 证明这个文件没有在版本控制的追踪下,分支中没有这个文件,是新建的, -&gt; add 添加到暂缓区,Untracked files:修改已经进入暂缓区, 有待 commit 到分支中 -&gt;  1 file changed,成功在分支中添加了一个文件, 再差 status 会是working directory clean, 和分支追踪的文件没有什么异同
当文件改动时,Changes not staged for commit: 文件的改动没有放暂缓区中待 commit,  -&gt; add. st 变为待提交, -&gt;commit -&gt; 成功
</code></pre><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><pre><code>* 自己搭建的话比较费时费力, 因为一般是搭建在 Linux 上的, 
* 我们一般用公开的别人搭好的公共托管仓库, github, oschina,  coding
* Github: -&gt; 右上角有个创建仓库, 
              -&gt; readme 一定要选, 可以介绍你这个项目是做什么用的, 还有项目的一些描述, 使用方法等
              -&gt; .gitignore 可以忽略掉不用提交的文件, 可以在这个文件里面编写匹配哪些文件是不需要提交的 
              -&gt; 右边有个 HTTPS clone URL , 就是项目仓库的路径, 这样就可以给别人下载到自己的仓库
              -&gt; 在当前 .git 所在的目录下, 使用 &apos;git remote add origin {这里是你的在 git 托管平台上创建项目的地址}&apos; 来添加当前 git 仓库锁指向的远程仓库, 这样之后我们 pull 和 push 就会对这个仓库进行读写, 建议先 pull 项目下来和当前本地的 merge 一下(对于 git@ 的地址来说可以, HTTPS 的地址只能 pull 操作不能 push, 因为缺少 sshkey 的认证), 或者可以先把网上的仓库 clone 到当前目录-&gt;git clone URL 再把项目文件夹放进这个目录, 这时工作区就可以用之前的操作, add. commit 到本地仓库, 
              -&gt; 这时只是在本地分支有这些操作, 还需要 push 到远程仓库去,
              -&gt; git push  ----然后首次会要求输入用户名密码, 就是 github 的用户名密码
* 想要在自己电脑上 push 项目还需要一些设置, 这个在一开始就要配置了!
    -&gt; git 远程是用 ssh 连接的, 需要把自己电脑上的 ssh keyes 添加到 github 的设置上, 表示只有这个 ssh keyes 所有者才能 push 代码, 只有配置了 key 在 github 上的电脑才能传东西, 以后参与开发的组员也是需要配置 key 到这个项目的 github 上
    -&gt; 获取 sshkey: 在电脑上用终端在~/.ssh 里创建公钥私钥对, 
    -&gt;命令: ssh-keygen -t rsa -C &quot;你的邮箱地址&quot; -&gt; 然后一直敲回车 -&gt;然后会在~/.ssh 目录下生成 ssh key 密钥对
    -&gt; id_rsa : 私钥, 不可泄露
    -&gt; id_rsa.pub : 公钥, 可以公开(将这个文件的内容粘贴到 Github 上)
    -&gt; 利用 cat 可以查看文件内容
    -&gt; 将pub 公钥粘贴到 gihub 上的 key 框中, add key.
每次增加新东西, commit 在本地仓库了想一次性的传到服务器的话, 用 push, 
其他组员第一次从服务器拿东西下来是用 clone拿到整个项目, 
之后每次从服务器更新东西都是 pull, 拉下新的变动的东西, 
用 github 客户端也可以办到以上和远程仓库同步
现在 github 也可以用 https


使用 oschina 和 coding 的好处是本地化更好一点, 私有项目免费1000个, 速度更快, 
创建仓库的过程都差不多

GitHub 有个 pullRequest 可以 fork 别人的项目, 燃火做一些改进后 pull Request 给作者, 看它会不会合并你的请求
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Coredata 使用]]></title>
      <url>https://Lneayce.github.io/2016/10/25/Coredata-%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>Coredata 使用</p>
<p>简单的使用都可以从网上找到教程</p>
<p>根据教程做卡到的地方和 bug 记录: </p>
<p>stuck: 在设置实体时, 实体间有一对多的关系:</p>
<blockquote>
<p>在属性那栏即右边工具栏 option+command+0打开, 最右边那标签下有选择 type, 选择 toMany 即可<br>stuck: 在改变了实体的一些属性后怎么更新?<br>直接在可视化中修改后, 新建subClass 文件, xcode 会自动更新对应的分类, 而类文件不变, 类文件不变就会有个问题, 在添加关系后, 因为是引用别的类, 但是自己的类头文件没有声明这个类会报错<br>stuck: 但是这样的话, 如果是在已经存有数据的情况下, 再修改模型, 会不会在存储中的模型图和新的对应不上, 那些更多的数据怎么办, 这时需要数据迁移<br><a href="http://www.jianshu.com/p/49872694e0b3" target="_blank" rel="external">http://www.jianshu.com/p/49872694e0b3</a><br><a href="https://objccn.io/issue-4-7/" target="_blank" rel="external">https://objccn.io/issue-4-7/</a><br><a href="http://www.bozhiyue.com/anroid/boke/2016/0602/173699.html" target="_blank" rel="external">http://www.bozhiyue.com/anroid/boke/2016/0602/173699.html</a><br><a href="https://github.com/ios122/MagicalRecord/blob/master/README.md" target="_blank" rel="external">关于第三方库 MagicRecord 的中文说明</a></p>
</blockquote>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[sublimeText3 使用手记]]></title>
      <url>https://Lneayce.github.io/2016/10/25/sublimeText3Handy/</url>
      <content type="html"><![CDATA[<p>sublime3的使用提升 </p>
<p>关于 sublime 的介绍, 已经很多了, 不累赘了. 这里就记录自己使用的积累</p>
<p>如果不想提醒, 可以搜注册码, 偶尔的提醒也不会对肯定不会买的人起效, 但是有钱还是应该支持的</p>
<p>安装了中文本地化插件, 目前没什么问题, 之前装插件的时候, 不知道是装了哪个, 会造成不能使用 packageControl 的情况, 卸载了还不行, 我是卸载后再删掉插件的目录重装了才行, 估计只要删掉某个插件就行<br><a href="~/Library/Application Support/Sublime Text 3">目录</a><br><a href="http://www.imooc.com/article/7727" target="_blank" rel="external">别人配置的手记, 粗略浏览感觉不错</a><br><a href="https://www.scislab.com/zh-hans/blog/sublime-text-te-se-cha-jian-tui-jian-gua-yong-ren-qun-python-java/" target="_blank" rel="external">手记</a><br>插件:</p>
<ul>
<li>中文本地化</li>
<li><a href="http://www.iteye.com/news/27580" target="_blank" rel="external">Emmet</a></li>
<li>markdown:<ul>
<li>markdown editing</li>
<li>OmniMarkupPreviewer</li>
</ul>
</li>
</ul>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[文章开篇]]></title>
      <url>https://Lneayce.github.io/2016/10/13/front-of-all/</url>
      <content type="html"><![CDATA[<h1 id="准备上传之前的文章"><a href="#准备上传之前的文章" class="headerlink" title="准备上传之前的文章"></a>准备上传之前的文章</h1><p>最近才搭建起来了这个博客, 之前学习还有生活中想到的写的一些东西, 慢慢传到这里来~ 作为一个分享空间, 拍砖的拍砖, 认同的点赞~ 哈哈哈哈</p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[这几天对搭建这个 hexo 博客汇总一下帖子]]></title>
      <url>https://Lneayce.github.io/2016/10/13/summarize-of-create-hexoblog/</url>
      <content type="html"><![CDATA[<h1 id="对之前搭建的帖子来个入口"><a href="#对之前搭建的帖子来个入口" class="headerlink" title="对之前搭建的帖子来个入口"></a>对之前搭建的帖子来个入口</h1><p>这几天搭建了这个 hexo 博客, 但是不是一步到位的搭建, 每步参考的帖子都没哟完整下来的从头到尾搭建到能从搜索引擎里搜索到帖子的方法介绍. 所以我也是从开始搭建来搜索, 做好后发现这样少了, 然后再弄好后又发现那样不行. 也许别人和我一样也是没有一步到位的完成, 所以也就分了几篇帖子.</p>
<h1 id="做的步奏"><a href="#做的步奏" class="headerlink" title="做的步奏"></a>做的步奏</h1><a id="more"></a>
<p>按照之前建 hexo 的顺序来列出帖子, 根据这个帖子的步奏来做, hexo 的搭建才算是基本完成了~ 想要更高级功能什么的自行 Google 哦~</p>
<ol>
<li><a href="/2016/10/11/%E5%88%9D%E6%AC%A1%E4%BD%BF%E7%94%A8-hexo-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%BF%87%E7%A8%8B%E4%BB%A5%E5%8F%8A%E7%A2%B0%E5%88%B0%E7%9A%84%E5%9D%91/">初次使用 hexo 搭建博客过程以及碰到的坑</a></li>
<li><a href="/2016/10/11/put-blog-both-coding-github/">部署 hexo 到 github 和 coding 上</a></li>
<li><a href="/2016/10/11/embed-qiniuimage-rss2/">给博客加上 RSS 和七牛图床</a></li>
<li><a href="/2016/10/12/seo-my-blog/">hexo 博客搭建起来后进行 SEO 让其搜索的到</a></li>
</ol>
<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>对于之后有什么补充的, 也会在这里贴出来</p>
<p>这时候才是真正的….enjoy it !</p>
<p>说到 enjoy it… 又想起了 Nike 的广告语的笑话…. just do it…所以很多人都去做了 IT….(◎-◎；)</p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo 博客搭建起来后进行 SEO 让其搜索的到]]></title>
      <url>https://Lneayce.github.io/2016/10/12/seo-my-blog/</url>
      <content type="html"><![CDATA[<h1 id="搭建完-hexo-之后-写了些文章后-你发现了么…"><a href="#搭建完-hexo-之后-写了些文章后-你发现了么…" class="headerlink" title="搭建完 hexo 之后, 写了些文章后, 你发现了么…"></a>搭建完 hexo 之后, 写了些文章后, 你发现了么…</h1><p>我们在搜索引擎搜不到我们的博客….<br>幸好继续搜啊搜找到解决方法了…<br><a id="more"></a></p>
<ul>
<li>.</li>
<li>.</li>
<li>.</li>
<li>.</li>
</ul>
<h1 id="完整的步奏汇总在-这几天对搭建这个-hexo-博客汇总一下帖子"><a href="#完整的步奏汇总在-这几天对搭建这个-hexo-博客汇总一下帖子" class="headerlink" title="完整的步奏汇总在: 这几天对搭建这个 hexo 博客汇总一下帖子"></a><em>完整的步奏汇总在: <a href="/2016/10/13/summarize-of-create-hexoblog">这几天对搭建这个 hexo 博客汇总一下帖子</a></em></h1><p><del>等我验证后再继续写….</del></p>
<p> 弄完了想试试, 啊哟? 发现点归档会找不到网页….在 coding 上又是正常的, 开始还怀疑会不会是 git 上去的时候有些文件失败了….  因为 git 上去的时候有提示 key_read: uudecode {pubKey} failed…</p>
<p> 然后过了一下, 自己好了…. 看来是国内网连接 github 的网络问题… 好悲催啊, 即是翻墙也是会有点问题啊.</p>
<h1 id="好了-开始"><a href="#好了-开始" class="headerlink" title="好了, 开始"></a>好了, 开始</h1><!-- more -->
<p>首先我搜索到锁参考的资料是主要有三篇</p>
<ol>
<li><p><a href="http://www.jianshu.com/p/619dab2d3c08" target="_blank" rel="external">主要是这篇: hexo干货系列：（六）hexo提交搜索引擎（百度+谷歌）</a>, 因为它我感觉比较全面点, 而且博主也是 github 和 coding 都有部署, 所以以此做主要指导~</p>
</li>
<li><p>然后是这篇: <a href="http://hunao.info/2016/06/01/Hexo-Seo%E4%BC%98%E5%8C%96%E8%AE%A9%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%9C%A8google%E6%90%9C%E7%B4%A2%E6%8E%92%E5%90%8D%E7%AC%AC%E4%B8%80/" target="_blank" rel="external">Hexo Seo优化让你的博客在google搜索排名第一</a>, 对于 Google SEO的介绍较完整.</p>
</li>
<li><p>足够是这篇, 也是 SEO 优化的 <a href="http://www.arao.me/2015/hexo-next-theme-optimize-seo/" target="_blank" rel="external">动动手指，不限于NexT主题的Hexo优化（SEO篇）</a></p>
</li>
</ol>
<h1 id="我的搭建注意点"><a href="#我的搭建注意点" class="headerlink" title="我的搭建注意点"></a>我的搭建注意点</h1><p>首先, 按照1.的做法, 一路下去按照那个博主的做法就好了, 我这里说一下碰到的坑:(主要针对 Next 主题, 其他的按照类似的自己测试下吧)</p>
<ul>
<li>在 Google 和百度验证站点的时候, 注意下载的验证文件最好要放在 Next 主题文件夹下的根目录: theme/source, 因为放在站点根目录的话:source, 在 ‘hexo g’ 生成站点文件即 public 文件夹的时候, 会根据主题或站点进行页面的渲染, 给这些验证文件加了很多东西, 不在是原来里面仅有的验证码内容, 放在主题的根目录的话不会有这种情况, 原来是什么文件夹就是什么文件夹, 这好像和主题里的一耳光配置文件有关, 里面判断了是否有这些文件, 有的话好像就不做渲染, 它判断的路径是自己主题下的. 评论里有说在验证文件的头部加个字段, 我没理解是在哪加, 直接加在内容里? 反正我是不行, 可能是在渲染后的文件的 head 头部加的. <strong>注意: 在根据这些博文操作的时候可能是生成什么, 在站点根目录 Source 文件夹下又会拷贝这验证文件过来, 记得删掉, 不然 hexo g 的时候又要渲染一次了</strong></li>
<li>其他的按照下来做也没什么问题, 对于百度的自动提交, 代码加的地方对于 Next 的话我是参考这个博文: <a href="http://www.jianshu.com/p/29d9eed79ad8" target="_blank" rel="external">hexo: windows下向百度站长平台主动推送链接</a> 说了 Next 主题下这段自动提交的代码加在哪里</li>
<li><p>另外, 在 github 和 coding 部署时, 验证两个站点的时候, Google 的话是同一个验证文件, 百度的是两个不同的, 按照上面去弄就好</p>
<blockquote>
<p>将next主题配置文件中的baidu_push设置为true<br>修改 /next/layout/_scripts文件夹下面的baidu-push.swig<br>脚本部分:</p>
 <script type="text/javascript" async src="//push.zhanzhang.baidu.com/push.js"></script>
 改为在百度自动推送那里复制来的那段(可能百度有所改动, 建议按照百度的代码贴上去)
 <script>
(function(){
  var bp = document.createElement('script');
  var curProtocol = window.location.protocol.split(':')[0];
  if (curProtocol === 'https') {
      bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';        
  }
  else {
      bp.src = 'http://push.zhanzhang.baidu.com/push.js';
  }
  var s = document.getElementsByTagName("script")[0];
  s.parentNode.insertBefore(bp, s);
})();
</script>
</blockquote>
</li>
<li><p>最后我在<a href="http://wuxiaolong.me/2015/07/31/build-blog-by-hexo/" target="_blank" rel="external">手把手教你建github技术博客by hexo</a>找到一些插件装了上去, 目前不知道有什么用, 之后不好用或对博客的加载有影响了再删掉吧.</p>
</li>
</ul>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>这篇不是边做边写的, 所以有些坑可能忘记了, 如果碰到什么坑的, 可以留言讨论讨论~ 善用 Google 哦~</p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[给博客加上 RSS 和七牛图床]]></title>
      <url>https://Lneayce.github.io/2016/10/11/embed-qiniuimage-rss2/</url>
      <content type="html"><![CDATA[<h1 id="原料"><a href="#原料" class="headerlink" title="原料"></a>原料</h1><p>恩, 还是按照之前那个博主的先来, 其中提到用一个框架, 挺好, 遂尝试</p>
<h2 id="qiniu4blog"><a href="#qiniu4blog" class="headerlink" title="qiniu4blog"></a>qiniu4blog</h2><p>项目地址<a href="https://github.com/wzyuliyang/qiniu4blog" target="_blank" rel="external">https://github.com/wzyuliyang/qiniu4blog</a></p>
<h1 id="相关搜索"><a href="#相关搜索" class="headerlink" title="相关搜索"></a>相关搜索</h1><p>恩, 搜过类似的七牛图床上传工具, 应该是这个会好点, 还可以使用命令行哦, 加上 <a href="http://www.jianshu.com/p/a15a6cb0f08d" target="_blank" rel="external">atext</a>, 也能快速的上传并复制好外链. 像<a href="http://cnfeat.com/blog/2015/11/30/cli-qiniu/" target="_blank" rel="external">这个博主</a>一样,</p>
<p>但是, 我还是比较懒, 用 qiuniu4blog 自动再截图的时候上传并复制好链接那也是挺好~</p>
<p>项目 github 里已经有使用教程了, 我这里就按着做, 帮大家踩踩坑~ヾ(=^▽^=)ノ</p>
<h1 id="碰到的问题"><a href="#碰到的问题" class="headerlink" title="碰到的问题"></a>碰到的问题</h1><p>额….我的 Mac 怎么 pip 不了…→.→</p>
<blockquote>
<p>恩, 默认我电脑上的Python2.7的好像, 然后我又安装了3, 搞得现在用不了这个命令, 好在 python3 用 pip3命令就可以了<br>然后用这个命令就可以更新下 pip 命令</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip3 install --upgrade pip</div></pre></td></tr></table></figure>
<p>这样, 直接就能用 pip 命令了<br><a id="more"></a></p>
<ul>
<li>.</li>
<li>.</li>
<li>.</li>
<li>.</li>
</ul>
<h1 id="完整的步奏汇总在-这几天对搭建这个-hexo-博客汇总一下帖子"><a href="#完整的步奏汇总在-这几天对搭建这个-hexo-博客汇总一下帖子" class="headerlink" title="完整的步奏汇总在: 这几天对搭建这个 hexo 博客汇总一下帖子"></a><em>完整的步奏汇总在: <a href="/2016/10/13/summarize-of-create-hexoblog">这几天对搭建这个 hexo 博客汇总一下帖子</a></em></h1><h1 id="好了-继续上面的步骤"><a href="#好了-继续上面的步骤" class="headerlink" title="好了, 继续上面的步骤"></a>好了, 继续上面的步骤</h1><p>刚才用 pip3 来装了qiniu4blog, 接下来就是注册一个七牛云哈, (其实我在想坚果云能不能做到类似的, 毕竟每月 1g 的空间使用速度不太快的话相当于无限空间了, 先完成这个了能有图床用了在研究坚果吧~)</p>
<p><strong>额, mgj, 竟然要实名认证….搜了下貌似还要拿个身份证拍照像淘宝一样… 又不是拿个图床能做点什么…😓, 还是看看有什么其他的替代吧, 不行就直接用压缩了的图片直接传博客, 感觉这样每个地方都要我的身份证拍照实在是…</strong></p>
<p>坚果云好像没找到什么有用的信息, 百度云倒是有相关的, 而且顺便也存一些非私密的图片也可以的,<br>如果这些还不行, 有个想法是在 github 或者 coding 或者 oschina 键一个项目, 专门存图片, 项目的大小不知道有没有限制, 没有的话直接用好了233333~<br>还有个新浪图床, 没去了解, 这些都之后了解下</p>
<p>所以, 这里先留个坑吧, 反正目前也不大贴图 ʅ（´◔౪◔）ʃ </p>
<h2 id="来-我们弄多说评论"><a href="#来-我们弄多说评论" class="headerlink" title="来, 我们弄多说评论~~"></a>来, 我们弄多说评论~~</h2><p>看好多弄 hexo 的博主都是用的这个, 风格也挺契合 Next 这个主题的, 所以评论系统就选它了~</p>
<p>嗯, 按照 <a href="http://theme-next.iissnan.com/third-party-services.html" target="_blank" rel="external">Next 作者的方法</a>(以下简称 Next 方法)去做, 也很顺利, <del>暂时先这样…蓝瘦, 香水饺…</del></p>
<h2 id="rss"><a href="#rss" class="headerlink" title="rss"></a>rss</h2><p>按照 Next 方法做, 在主题设置那里</p>
<h2 id="阅读次数统计"><a href="#阅读次数统计" class="headerlink" title="阅读次数统计"></a>阅读次数统计</h2><p>在 Next 方法里, 有提到, 用 leancloud, 根据推荐的帖子做, 现在页面和帖子中的有点不一样, 直接注册登录好后就可以看到’创建应用’的按钮, 接下来就是和博主做的一样就好了, 没有问题ʅ(‾◡◝)</p>
<h1 id="基本可以了-目前就是没有图床-但这个目前不太影响"><a href="#基本可以了-目前就是没有图床-但这个目前不太影响" class="headerlink" title="基本可以了~ 目前就是没有图床, 但这个目前不太影响~"></a>基本可以了~ 目前就是没有图床, 但这个目前不太影响~</h1>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[部署 hexo 到 github 和 coding 上]]></title>
      <url>https://Lneayce.github.io/2016/10/11/put-blog-both-coding-github/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在<a href="">上一篇博文</a>中, 搭建成了 hexo 博客, 设置好了 Next 主题<br>但是, 你懂的, 功夫网, 有时候 github 上打开 .io 会是挺慢的, 所以部署到国内的话会好不少(应该)</p>
<p> 国内两个比较好的代码托管的网站应该就是 oschina 和 coding 了吧, 这里先选 coding 来另作部署, 因为…..它的配色我还是挺喜欢的2333333</p>
<a id="more"></a>
<ul>
<li>.</li>
<li>.</li>
<li>.</li>
<li>.</li>
</ul>
<h1 id="完整的步奏汇总在-这几天对搭建这个-hexo-博客汇总一下帖子"><a href="#完整的步奏汇总在-这几天对搭建这个-hexo-博客汇总一下帖子" class="headerlink" title="完整的步奏汇总在: 这几天对搭建这个 hexo 博客汇总一下帖子"></a><em>完整的步奏汇总在: <a href="/2016/10/13/summarize-of-create-hexoblog">这几天对搭建这个 hexo 博客汇总一下帖子</a></em></h1><ul>
<li>.</li>
<li>.</li>
<li>.</li>
</ul>
<h2 id="找资料"><a href="#找资料" class="headerlink" title="找资料"></a>找资料</h2><p>一开始肯定是看有没有哪个前辈做过啦~, 上一篇说到了<a href="http://chitanda.me/2015/06/11/tips-for-setup-hexo/" target="_blank" rel="external">一个博主</a>已经做了, 所以先参照他的来弄弄, 然后还有一个博主的也可以看看, 写的也挺详细: <a href="http://shomy.top/2016/03/03/hexo-in-coding-github/" target="_blank" rel="external">hexo同时部署到coding(gitcafe)和github</a></p>
<h1 id="好了-开始"><a href="#好了-开始" class="headerlink" title="好了, 开始."></a>好了, 开始.</h1><ol>
<li>因为我是不同的邮箱注册了 coding, 所以好像我要重新生成个 sshkey…</li>
<li>然后添加到 coding 的 sshkey 中</li>
<li>验证…..额….失败…. <blockquote>
<p>经过几次重复上面操作确认步奏无误后, 还是不行, 在首次连接时候会提示:<br>Warning: Permanently added ‘git.coding.net,14.215.101.70’ (RSA) to the list of known hosts.<br> Permission denied (publickey).<br>进到这个 known hosts 查看到最后一条记录, 是 coding 的, 但是后面跟着的 rsa 是和 github 一样, 说明那个 config 文件没有配置正确, git coding 时用了 github 的 key, 看到它连的是 git.coding.net , 将配置文件中的 coding.net 改成 git.coding.net, 再试, 成功</p>
</blockquote>
</li>
<li>好了, 这回成功了….至此, 第一篇博文的部分完成(之后分流到七牛的还要参考下这个), 我们看看<a href="http://shomy.top/2016/03/03/hexo-in-coding-github/" target="_blank" rel="external">第二篇</a>的接下去要怎么弄, 下面的都是按照这个博文来的, 有问题会详细说, 没问题就直接过</li>
<li>嗯, 新建项目, 照之前 github 方式走一遍… coding 建项目不懂的详细看<a href="http://www.jianshu.com/p/2cbf3e2f6d57" target="_blank" rel="external">这篇</a>有</li>
<li>建好项目后, 进入站点的文件夹(也就是你的博客放在哪个文件夹了, 之前创建博客的那个文件夹), 改配置文件_config.yml</li>
<li>额…到了 hexo d 部署的时候卡在 create mode 100644 vendors/velocity/velocity.ui.min.js 好久啊, 好像有点不正常… Ctrl+C 重新部署一次, </li>
<li>这次好了, 不过我傻逼了下, 在_config.yml 之前添加的参数后面都加了个空格, 我也不知道是不是这个原因…或者是我之前添加参数后没有保存?所以源文件还是之前那样? 记得保存了再试, 应该就好了</li>
<li>终于到了开启 page 服务的时候啦~~, 嗯, 它那个开启分支默认填的是 coding-pages, 如果你建的博客项目是在 master 分支的, 要改成 master!! 反正要和你项目的分支一样!</li>
</ol>
<h2 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下~"></a>测试一下~</h2><p>进入<a href="http://lneayce.coding.me/Lneayce/" target="_blank" rel="external">coding 的博客</a>好的! 成功了!<br>然后再看自己的 <a href="https://lneayce.github.io/">github 上的地址</a>嗯, 很好~</p>
<h3 id="多开博客"><a href="#多开博客" class="headerlink" title="多开博客"></a>多开博客</h3><p>另外, 有开小号或者帮妹纸搭建管理的, 可能是需要有几个 github 帐号, 按照上面的话, 还需要有 coding 帐号, 那么, 当一台电脑访问两个不同的网站时, 对应两个不同网站的帐号就是按照上面的, 这多出来一份博客要怎么弄?</p>
<ol>
<li>首先要给新一个人按照上面的步骤配置好 SSHKeys, 一样是每个网站各一份, 上传好公钥后, 本地主要设置的是 config 文件, 我们要让ssh 客户端知道在对应这个域名主机时是需要哪个密钥, 我们就要对这些主机设置别名, 而且在给博客添加 git 远程地址时, 域名的地方要换成我们起的别名, </li>
</ol>
<p><a href="http://notes.seirhsiao.com/2016/01/24/2014-09-30-github-multiple-account-and-multiple-repository/" target="_blank" rel="external">如何同一台电脑配置多个git或github账号</a></p>
<p>我的话就是在原来之前设置的那些不改动, 因为已经设置过相应的站点了, 再改动恐怕还要改博客文件夹配置文件中仓库的主机域名吧. 所以我们要添加哪个人的一个博客, 就在主机域名前加上前缀好了, 测试 ssh -T git@前缀.coding.net 能通就行, 也测试下之前原来的两个吧, 以免在设置的时候有误操作造成问题.</p>
<p>理解了帖子里面的分析, 说白了就是会根据 config 文件里Host 名字来找对应的 HostName 替换上去, 让后使用那段指定的私钥来连接所以, 在 git 测试连接的时候, 那个git@Host 就行了, </p>
<p>在给 hexo 的_config 设置仓库地址时, 赋值下来的地址也要把那个@这个域名:换成我们设置的别名, 到时候会自动替换回去, 并用指定的私钥连接</p>
<h1 id="至此完成"><a href="#至此完成" class="headerlink" title="至此完成~"></a>至此完成~</h1>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ 初次使用 hexo 搭建博客过程以及碰到的坑]]></title>
      <url>https://Lneayce.github.io/2016/10/11/%E5%88%9D%E6%AC%A1%E4%BD%BF%E7%94%A8-hexo-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%BF%87%E7%A8%8B%E4%BB%A5%E5%8F%8A%E7%A2%B0%E5%88%B0%E7%9A%84%E5%9D%91/</url>
      <content type="html"><![CDATA[<h1 id="首先搭建博客"><a href="#首先搭建博客" class="headerlink" title="首先搭建博客"></a>首先搭建博客</h1><p>搭建时候肯定是搜别人是怎么搭建的啦~ 但是本好像有个不知道是好是坏的习惯, 要参考几个博主的搭建… 这个会不会有点浪费时间, 其实我一直想是看一篇了先去跟着做了再出问题再看其他的, 不知道这算不算一种强迫症诶….</p>
<p>好了, 开始, 我是先参照<a href="https://madongqiang2201.github.io/2016/07/21/Mac%E4%B8%8BHexo%EF%BC%8Bgithub-pages%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/#more" target="_blank" rel="external">这个博主的过程</a>做的, 里面还提到了<del>官方教程</del>, 这个之前我也看了, 但是我感觉看别人做的发教程的话, 也许能绕过一些坑.</p>
<h2 id="之间碰到的坑"><a href="#之间碰到的坑" class="headerlink" title="之间碰到的坑"></a>之间碰到的坑</h2><p>弄着弄着, 到 SSHKey 的时候, 因为之前记得在 Github 上 Add 过一次, 就没弄, 后来发现不行, 之前弄的好像是单独在一个文件夹里设定的邮箱, 和全局的 git 不同导致的在其他地方用不了? 反正我是重新弄了一个 key 传上去, 才 OK. (有时候打开 Setting 那地方会死活进不去, 过一会就好了, 我觉得是我的网络的原因吧:()</p>
<a id="more"></a>
<ul>
<li>.</li>
<li>.</li>
<li>.</li>
<li>.</li>
</ul>
<h1 id="完整的步奏汇总在-这几天对搭建这个-hexo-博客汇总一下帖子"><a href="#完整的步奏汇总在-这几天对搭建这个-hexo-博客汇总一下帖子" class="headerlink" title="完整的步奏汇总在: 这几天对搭建这个 hexo 博客汇总一下帖子"></a><em>完整的步奏汇总在: <a href="/2016/10/13/summarize-of-create-hexoblog">这几天对搭建这个 hexo 博客汇总一下帖子</a></em></h1><p>好的, 到这里还没有什么大问题, 接着, 要-装逼啦-装 hexo 啦~~~<br>诶? 怎么卡在什么 sill 那个地方不动了…. 看网速, 0~1k… ㄟ( ▔, ▔ )ㄏ<br>只好设置全局代理看看…. 不过貌似听说终端走不了 ss 代理? 反正每切一次都能跳一下, 实在跳不动了, 我只能 ctrl + C 断掉再来了…<br> <strong>注意: 断掉再重新安装的话会利用之前下载的那些缓存, 而不是从头下载</strong><br> <em>可还是慢的不行啊…</em><br> 于是乎, 我又找找有没有人这么慢的, 就找到了<a href="http://chitanda.me/2015/06/11/tips-for-setup-hexo/" target="_blank" rel="external">这个博主</a>, 他是 Windows 系统, 不过也差不多啦, 里面说的在 coding 上也部署上去我准备也想试试. 里面说到了用国内淘宝的镜像来下载, 我这里的结果是_<em> ERROR xxxxxxxxx</em> 啥的, 不记得了, 好像意思是少了什么?? 看来是走不通<br> 然后, 又找到了<a href="http://www.jianshu.com/p/fd878edb95e7" target="_blank" rel="external">这个博主</a>, 对了, 是它提到了官方安装, 第一个那个没提到, 提到的是 Next 主题的官方安装, 这里用的是<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo --no-optional</div></pre></td></tr></table></figure></p>
<p> 好像有好点吧, 但是还是有点慢, 就扔着不管了…反正就那么以上步奏折腾折腾, 断了重新, 再断再重新, 终于弄好了(◎_◎;)</p>
<p> 嗯, 接下来再继续按第一个博主的弄, hexo init, npm install…<br> <strong>慢着…怎么 init 又好久…</strong><br> <strong>这里在自己的文件夹里 hexo init 的时候, 如果你要中断的话一定要清空文件夹里的东西或者删了文件夹重新建吧</strong><br> 因为这里中断的话, 再执行 hexo 命令它就不认了, 说这个文件夹没有班底 hexo, 大概是你断掉了以后 hexo 的管理和这个文件夹断了吧??</p>
<p> 这样又反复弄了几次, 诶…终于好了…<br> npm install 也 OK ~~&lt;(▰˘◡˘▰)&gt;</p>
<p> 后面的就一路过去没问题了~</p>
<h1 id="安装主题-Next"><a href="#安装主题-Next" class="headerlink" title="安装主题 Next"></a>安装主题 Next</h1><p>对, 这个很简单, 按照 Next 作者的弄就 OK 了, 就是从 github 上下载 repo 比较久, 耐心点<br>里面的很多配置都有提到. 顺便说下, 博客底部就可以看哪些博客是用什么主题, 我这里是用 pisces scheme, 诶? 双鱼?~</p>
<p>之后就 OK 啦~ 没什么大问题了, 要是洞 CSS 的话还能在其他的配置文件那里自己设定样式, 像我就想让背景换暗色系…(话说作者这个说法在一年前都说了到现在都没弄啊啊啊…)</p>
<p>然后又一遍 goo, 恩, 可以, 有人做过的, 自己搜下 ‘hexo next 改背景’ 找找就有了,<br>我搜到的一些:</p>
<blockquote>
<p>在 NexT 主题的 github 的 issues 里，我找到了如何自定义一些页面样式的方法，作者 IISSNan 很贴心的在主题的 “\source\css_custom\” 文件夹下放了一个 custom.styl 文件，可以让用户自己在里面写 CSS 代码以个性化自己的博客。<br>于是我找到这个文件，并找到一张去年在三亚拍的大海照片用作背景，开始编写代码了！<br>首先我尝试输入了如下的 CSS 代码，主要是来测试一下这个 custom.styl 是否真的有效：<br>background-image:url(/images/background.jpg);<br>background-repeat: no-repeat;<br>background-attachment:fixed;<br>background-position:50% 50%; </p>
</blockquote>
<p>还有一个项目 issue 里提到的</p>
<blockquote>
<p>@ethan-funny 可以，在 source/css/_variables/base.styl 中：<br>// Background color for <body><br>$body-bg-color                = white</body></p>
</blockquote>
<p>不过我试过吧这个 white 换成其他的没有用, 不知道落了哪一步, 成功的人能提点下我吗?(／。＼)</p>
<h1 id="文章剧终…"><a href="#文章剧终…" class="headerlink" title="文章剧终…"></a>文章剧终…</h1><p>嗯, 顺便这是我第一篇发上去的博文, 看看效果~<br>哦~ 想在主页文章列表显示一部分, 其他的要点击’阅读更多’来获取的话, 在显示和隐藏之间加上</p>
<blockquote>
<p>‘<!-- more -->‘</p>
</blockquote>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hi, There ^~^]]></title>
      <url>https://Lneayce.github.io/2016/10/10/hello-world/</url>
      <content type="html"><![CDATA[<p>here is my first personal blog, if u see, u will know this word is for u, i really woundn’t border u, just like before, we 233333 is fine. keep post our self infomation out, and don’t loss the mind. </p>
<a id="more"></a>
<h2 id="Mention"><a href="#Mention" class="headerlink" title="Mention"></a>Mention</h2><h3 id="Put-My-walk-forward"><a href="#Put-My-walk-forward" class="headerlink" title="Put My walk forward"></a>Put My walk forward</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ just to enclose u, more close</div></pre></td></tr></table></figure>
<h3 id="Run-mind"><a href="#Run-mind" class="headerlink" title="Run mind"></a>Run mind</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ miss u any time</div></pre></td></tr></table></figure>
<h3 id="Generate-heart"><a href="#Generate-heart" class="headerlink" title="Generate heart"></a>Generate heart</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ i make a heart just like u make me, use your ploy</div></pre></td></tr></table></figure>
<h3 id="To-follow-what"><a href="#To-follow-what" class="headerlink" title="To follow what"></a>To follow what</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ i believe i will touch u again... maybe</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
  
  
</search>
